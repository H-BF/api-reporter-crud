generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Launch {
    uuid        String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    date        DateTime     @default(now())
    pipeline    Int
    job         Int
    src_branch  String
    dst_branch  String
    commit      String
    fail_count  Int?
    pass_count  Int?
    duration    Int?
    hbf_tag     String
    status      LaunchStatus @default(create)
    LaunchError LaunchError?
    Executions  Executions[]
    JsonSchema  JsonSchema[]

    @@unique([pipeline, job])
    @@map(name: "launch")
}

model LaunchError {
    uuid        String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    launch_uuid String @unique @db.Uuid
    message     String
    launch      Launch @relation(fields: [launch_uuid], references: [uuid])

    @@map(name: "launch_error")
}

model Request {
    uuid       String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    method     Method
    url        String
    header     Json
    body       Json
    Executions Executions?

    @@map(name: "request")
}

model Response {
    uuid       String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    status     String
    code       Int
    header     Json
    body       Json
    Executions Executions?

    @@map(name: "response")
}

model Executions {
    uuid          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name          String
    launch_uuid   String       @db.Uuid
    request_uuid  String       @unique @db.Uuid
    response_uuid String       @unique @db.Uuid
    launch        Launch       @relation(fields: [launch_uuid], references: [uuid])
    request       Request      @relation(fields: [request_uuid], references: [uuid])
    response      Response     @relation(fields: [response_uuid], references: [uuid])
    Assertions    Assertions[]

    @@map(name: "executions")
}

model Assertions {
    uuid           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name           String
    execution_uuid String     @db.Uuid
    json_schema    String?    @db.Uuid
    error_message  String?
    status         TestStatus
    execution      Executions @relation(fields: [execution_uuid], references: [uuid])
    schema         JsonSchema? @relation(fields: [json_schema], references: [uuid])

    @@map(name: "assertions")
}

model JsonSchema {
    uuid        String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name        String
    launch_uuid String       @db.Uuid
    json_schema Json
    launch      Launch       @relation(fields: [launch_uuid], references: [uuid])
    Assertions  Assertions[]

    @@map(name: "json_schema")
}

enum LaunchStatus {
    create
    in_process
    finish
    error

    @@map(name: "launch_status")
}

enum Method {
    GET
    POST

    @@map(name: "method")
}

enum TestStatus {
    fail
    pass

    @@map(name: "test_status")
}
